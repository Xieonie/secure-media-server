version: '3.8'

services:
  # Reverse Proxy and SSL Termination
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - nginx_data:/data
      - nginx_letsencrypt:/etc/letsencrypt
      - ./config/nginx:/etc/nginx/custom
    environment:
      DB_MYSQL_HOST: "nginx-db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      DB_MYSQL_NAME: "npm"
    networks:
      - frontend
      - nginx-internal
    depends_on:
      - nginx-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:81"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx-db:
    image: 'mariadb:latest'
    container_name: nginx-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "npm"
      MYSQL_USER: "npm"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    volumes:
      - nginx_db_data:/var/lib/mysql
    networks:
      - nginx-internal

  # Authentication Server
  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    restart: unless-stopped
    volumes:
      - authelia_config:/config
      - ./config/authelia:/config/custom
    environment:
      - TZ=${TZ}
    networks:
      - frontend
      - auth-internal
    depends_on:
      - authelia-redis
    expose:
      - 9091

  authelia-redis:
    image: redis:alpine
    container_name: authelia-redis
    restart: unless-stopped
    volumes:
      - authelia_redis_data:/data
    networks:
      - auth-internal
    command: redis-server --requirepass ${REDIS_PASSWORD}

  # Media Server (Jellyfin)
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    user: ${PUID}:${PGID}
    environment:
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_URL}
    volumes:
      - jellyfin_config:/config
      - jellyfin_cache:/cache
      - ${MEDIA_PATH}:/media:ro
      - ${DOWNLOADS_PATH}:/downloads:ro
    networks:
      - media
    devices:
      - /dev/dri:/dev/dri # Hardware acceleration (Intel)
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TV Show Management
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - sonarr_config:/config
      - ${MEDIA_PATH}/tv:/tv
      - ${DOWNLOADS_PATH}:/downloads
    networks:
      - media
      - downloads
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Movie Management
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - radarr_config:/config
      - ${MEDIA_PATH}/movies:/movies
      - ${DOWNLOADS_PATH}:/downloads
    networks:
      - media
      - downloads
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Indexer Manager
  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - prowlarr_config:/config
    networks:
      - media
      - downloads
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # BitTorrent Client
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - qbittorrent_config:/config
      - ${DOWNLOADS_PATH}:/downloads
    networks:
      - downloads
    ports:
      - "6881:6881"
      - "6881:6881/udp"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # VPN for Download Client (Optional)
  vpn:
    image: dperson/openvpn-client:latest
    container_name: vpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - ./config/vpn:/vpn:ro
    environment:
      - VPN_CONFIG=/vpn/config.ovpn
    networks:
      - downloads
    profiles:
      - vpn

  # Monitoring and Updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${NOTIFICATION_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${NOTIFICATION_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}
    networks:
      - monitoring

  # System Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - monitoring
      - frontend
    profiles:
      - monitoring

  # Security Monitoring
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - fail2ban_data:/data
      - ./config/fail2ban:/etc/fail2ban/custom
      - /var/log:/var/log:ro
    environment:
      - TZ=${TZ}
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=30d
    profiles:
      - security

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

  media:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24

  downloads:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24

  monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/24

  nginx-internal:
    driver: bridge
    internal: true

  auth-internal:
    driver: bridge
    internal: true

volumes:
  nginx_data:
  nginx_letsencrypt:
  nginx_db_data:
  authelia_config:
  authelia_redis_data:
  jellyfin_config:
  jellyfin_cache:
  sonarr_config:
  radarr_config:
  prowlarr_config:
  qbittorrent_config:
  prometheus_data:
  grafana_data:
  fail2ban_data: